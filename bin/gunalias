#!/usr/bin/perl
=head1 gunalias

Normalizes gene symbols.

=head1 SYNOPSIS

    gunalias [-h] [-i INPUT] [-o OUTPUT] [-c COLUMN [-c COLUMN] ...] [-s SEPARATOR] [-d DICTIONARY]

=head1 DESCRIPTION

gunalias normalizes gene and protein symbols using a symbol dictionary.

By default, input and output will be STDOUT and STDIN respectively, although both can be changed with option -i and -o.


=head1 OPTIONS

=over 8

=item B<-h>, B<-help>

Shows this help.

=item B<-v>, B<-verbose>

Change verbosity.

=item B<-i>, B<-input> FILE

Input file to normalize gene names from. If not specified, will use STDIN.

=item B<-o>, B<-output> FILE

Output file to write normalized table. If not specified, will write to STDOUT.

=item B<-c>, B<-columns> INTEGER

Columns in input or STDIN where the gene names are so that gunalias can normalize them. Should be bigger than 1. 
Default is 1. Normalize multiple columns by specifying the option multiple times, e.g.: `gunalias -c 1 -c 2`

=item B<-s>, B<-separator> STRING

Separator character (or Perl-compatible regular expression) that defines columns in input or STDIN. By default "\t".

=item B<-d>, B<-dictionary> FILE

Dictionary file for CGL::Unalias to use. If not specified, gunalias will use the default HGNC dictionary of the CGL::Unalias module.

=back

=cut

use strict;
use warnings;
use CGL::Unalias;
use Getopt::Long qw(:config no_ignore_case);
use Pod::Usage;

# ------------------------------------
# FUNCTIONS

sub get_options {
    my %options = ();
    GetOptions (
        \%options    ,
        'help|?'     ,
        "verbose|?"  ,
        "input=s"    ,
        "output=s"   ,
        "columns=i@"   ,
        "dictionary=s",
        "separator=s",
    );

    # If help
    pod2usage(-verbose => 1) if defined $options{'help'};

    # Defaults
    if (not defined $options{'columns'}) {
        $options{'columns'} = [0];
    } else {
        # Check that all columns are > 0 and make them 0-indexed.
        foreach my $icol (0..$#{ $options{'columns'} }) {
            if ($options{'columns'}->[$icol] <= 0) {
                die "Option -c should be an integer >= 1 !\n";
            } else {
                $options{'columns'}->[$icol] -= 1;
            }
        }
    }

    if (not defined $options{'separator'}) {
        $options{'separator'} = "\t";
    }
    return \%options;
}


sub print_start {
    my $opts = shift;
    print STDERR "\n gunalias - Normalize gene/protein symbols.\n",
                   "\t# Program started.\n";
    return;
}


sub print_finished {
    print STDERR "\t# Program finished.\n\n";
    return;
}


sub unalias_table {
    my $opts       = shift;
    my $input_name = "STDIN";
    my $ifh;
    my $ofh;

    my $unalias = new CGL::Unalias;
    print STDERR "\t# Loading gene symbol dictionary...\n" if $opts->{'verbose'};
    if (defined $opts->{'dictionary'}) {
        print STDERR "\t# Loading custom dictionary: $opts->{'dictionary'}.\n" if $opts->{'verbose'};
        $unalias->load($opts->{'dictionary'}, 0);
    } else {
        print STDERR "\t# Loading default HGNC dictionary.\n" if $opts->{'verbose'};
        $unalias->load();
    }
    print STDERR "done.\n" if $opts->{'verbose'};

    if (defined $opts->{'input'}) {
        print STDERR "\t# Reading file $opts->{'input'}.\n" if $opts->{'verbose'};
        open $ifh, "<", $opts->{'input'} 
            or die "Can't open $opts->{'input'}! : $!\n";
    } else {
        print STDERR "\t# Reading from STDIN.\n" if $opts->{'verbose'};
        $ifh = *STDIN;
    }

    print STDERR "\t# Normalizing columns ", 
                 join(",", map { my $var = $_; $var += 1; } @{ $opts->{'columns'} } ), 
                 "\n" if $opts->{'verbose'};
    if (defined $opts->{'output'}) {
        print STDERR "\t# Writing to $opts->{'output'}.\n" if $opts->{'verbose'};
        open $ofh, ">", $opts->{'output'}
            or die "Can't write to $opts->{'output'}\n";
    } else {
        print STDERR "# Writing to STDOUT.\n" if $opts->{'verbose'};
        $ofh = *STDOUT;
    }

    while (<$ifh>) {
        chomp;
        my @cols = split /$opts->{'separator'}/;
        next if /^#/;
        foreach my $col (@{ $opts->{'columns'} }) {
            print STDERR "\tWARNING: Column specified exceeds number of columns in input file (", 
                     $col + 1, 
                     " vs ", 
                     scalar(@cols), ")\n" if scalar(@cols) < ($col + 1);

            $cols[$col] = $unalias->unalias($cols[$col]);
        }
        print $ofh join($opts->{'separator'}, @cols), "\n";
    }

    return;
}


# ------------------------------------
# MAIN
my $opts = get_options();
print_start($opts) if $opts->{'verbose'};
unalias_table($opts);
print_finished if $opts->{'verbose'};
