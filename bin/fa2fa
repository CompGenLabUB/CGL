#!/usr/bin/perl
#
# fa2fa.pl
#
#   Fixing fasta files.
#
# ####################################################################
#
#              Copyright (C) 2003 - Josep F ABRIL
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# ####################################################################
#
# $Id$
#
# USAGE:
#   fa2fa.pl < prot_seq.tbl > prot_seq.fasta
#
use strict;
use warnings;
BEGIN{
    use CGL::Global qw( :Benchmark :ExecReport :CommandLine :GetFH :Exit );
    &init_timer(\@exectime);
}
#
use CGL::Largeseqs qw( :PERLiofh :MULTIfasta :SAVEfasta :REVCOMPseq );
#
# VARS
$PROG = 'fa2fa.pl';
$VERSION = substr('$Id: 1.0 $', 5, -2);
$USAGE =<<'+++EOH+++';
USAGE:

  fa2fa.pl [ options ] < prot_seq.tbl > prot_seq.fasta


DESCRIPTION:

  Fixing fasta files: standard sequence IDs, removing weird chars,
  and so on.
  It is quite fast as it uses C functions from largeseqs.pm (via
  Inline perl module).


COMMAND-LINE OPTIONS:

  -R, --reverse-seq
    Returns the reverse sequence of each input sequence.

  -C, --complement-seq
    Returns the complement sequence for each input sequence.

  -RC, --reverse-complement
    Returning the reverse-complement for all the input seqs.

  -Z, --gzip-output
    Compress output on the fly and send to stdout.

  -p, --fix-id-prefix <regexp>
  -s, --fix-id-suffix <regexp>
     Fixing IDs by removing a prefix or a suffix from the ID string.
     <regexp> sets a regular expression which defines what has to be
     removed from input sequence IDs. 

+++EOH+++
#
my $funct;
my ($gzip,$revf,$compf,$do_funct) = (0,0,0,1);
my ($filterID, $prefix, $suffix) = (undef) x 3;
#
# ARGVS
&add_cmdline_opts('R|reverse-seq'      => \$revf ,
                  'C|complement-seq'   => \$compf ,
                  'reverse-complement' => sub { $compf = $revf = 1; } ,
                  'p|fix-id-prefix=s'  => \$prefix ,
                  's|fix-id-suffix=s'  => \$suffix ,
                  'Z|gzip-output'      => \$gzip   );
&parse_cmdline();
#
my $msg = 'FASTA -> FASTA';
if ($compf + $revf == 2) { # $revf == 1 && $compf == 1
    $msg = 'FASTA -> reverse-complement(FASTA)';
    $funct = \&do_revcom;
} elsif ($revf > $compf) { # $revf == 1 && $compf == 0
    $msg = 'FASTA -> reverse(FASTA)';
    $funct = \&do_rev;
} elsif ($compf > $revf) { # $revf == 0 && $compf == 1
    $msg = 'FASTA -> complement(FASTA)';
    $funct = \&do_com;
} else {                   # $revf == 0 && $compf == 0
    $do_funct = 0;
};
#
$filterID =
   (defined($prefix) && defined($suffix))
     ? sub { my $ref = shift; $$ref =~ s/^$prefix//o; $$ref =~ s/$suffix$//o; }
     : (defined($prefix)
         ? sub { my $ref = shift; $$ref =~ s/^$prefix//o; }
         : (defined($suffix)
             ? sub { my $ref = shift; $$ref =~ s/$suffix$//o; }
             : sub { }
            )
        );
#
my $ifile = (shift @ARGV) || '-';
#
# MAIN
set_verbose($_verbose{RAW}, 50, 0, $_verbose{DEBUG});
           # verbose ON/OFF
           # (here we are parsing sequences char by char, not by lines)
           # 50 chars x dot ~ 1line x dot, 50 lines x report_line
           #   50 lines x report_line * 50bp x line = 2500aa
           # 0 -> use default value
           # debug ON/OFF
&program_started($PROG);
print STDERR "## $msg : Proceed ".($do_funct ? "YES" : "NO")."\n"
    if $_verbose{RAW};;
&parse_input_seqs($ifile,$gzip);
&program_finished($PROG);
&EXIT('OK');
#
# SUBS
sub parse_input_seqs() {
    my ($file,$gzip,$seqid,$desc,$seq,$seqlen,$pn,
        $ofl,$IFH,$sin_flg,$OFH,$sout_flg);
    # $file = shift || '-';
    ($file,$gzip) = @_;
    ($IFH, $sin_flg) = &getIFH($file);
    set_perlfh($IFH, 0, $sin_flg); # 0~input_file :: 1~output_file
    $ofl = $gzip ? '| gzip '.($_verbose{RAW} ? '-v ' : '').'--best -' : '-';
    ($OFH, $sout_flg) = &getOFH($ofl);
    set_perlfh($OFH, 1, $sout_flg); # 0~input_file :: 1~output_file
    # $ifh = open_input_file($file);
    # $ofh = open_output_file('-');
    $pn = 0;
    # print STDERR "##\n" if $_verbose{RAW};
    while (get_large_fasta_seqs($seqid,$desc,$seq,$seqlen)) {
        print STDERR "#-> $seqid [$seqlen bp|aa]\n" if $_verbose{RAW};
        # TO BE IMPLEMENTED: check sequence once it is loaded into mem
        $filterID->(\$seqid);
	$funct->(\$seq,$seqlen) if $do_funct;
        save_fasta($seqid." ".$desc,$seq);
        # print STDERR "##\n" if $_verbose{RAW};
        $pn++;
    }; # while <FAF>
    close($IFH) unless $sin_flg  == 2;
    close($OFH) unless $sout_flg == 2;
    # close_file($ifh,0); # 0~input_file :: 1~output_file
    # close_file($ofh,1);
    # just to ensure that memory is cleaned (also buffers and/or swap)
    undef $seqid; undef $desc; undef $seq; undef $seqlen;
    print STDERR "###\n### $pn sequences converted to fasta format...\n"
        if $_verbose{RAW};
} # parse_input_seqs
sub do_revcom() {
    my ($sqref,$sql) = @_;
    reversecompl($sqref,$sql);
} # do_revcom
sub do_rev() {
    my ($sqref,$sql) = @_;
    reverse_seq($sqref,$sql);
} # do_rev
sub do_com() {
    my ($sqref,$sql) = @_;
    complement_dnaseq($sqref,$sql);
} # do_com
